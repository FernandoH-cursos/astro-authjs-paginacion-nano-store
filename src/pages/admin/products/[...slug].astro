---
import { actions } from 'astro:actions';

import MainLayout from '@/layouts/MainLayout.astro';
import ProductSlideshow from '@/components/products/ProductSlideshow.astro';
import ProductImage from '@/components/products/ProductImage.astro';

const {slug = ''} = Astro.params;

const {data, error} = await actions.getProductBySlug(slug);
if (error) {
  return Astro.redirect('/404');
}

const { product,images } = data;

const selectedSizes = product.sizes.split(',');
---

<MainLayout title="Mantenimiento de producto">
  <h1>{product.title}</h1>
  <a href="javascript:history.back()" class="text-blue-500">← Volver</a>

  <form class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <!-- Guardando id del producto -->
    <input type="hidden" name="id" value={product.id} />

    <!-- Datos generales -->
    <div class="mt-2">
      <h2 class="text-lg font-semibold">Datos generales</h2>

      <!-- Titulo -->
      <div class="mb-4">
        <label for="title" class="block">Título</label>
        <input
          type="text"
          id="title"
          name="title"
          value={product.title}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Slug -->
      <div class="mb-4">
        <label for="slug" class="block">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          value={product.slug}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Descripción -->
      <div class="mb-4">
        <label for="description" class="block">Descripción</label>
        <textarea
          id="description"
          name="description"
          class="w-full p-2 border border-gray-300 rounded"
          rows="8">{product.description}</textarea
        >
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <!-- Precio -->
        <div class="mb-4">
          <label for="price" class="block">Precio</label>
          <input
            type="number"
            id="price"
            name="price"
            value={product.price}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <!-- Inventario -->
        <div class="mb-4">
          <label for="stock" class="block">Inventario</label>
          <input
            type="number"
            id="stock"
            name="stock"
            value={product.stock}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>
      </div>

      <!-- Labels -->
      <div class="mb-4">
        <label for="tags" class="block"
          >Etiquetas <small class="text-gray-500">(Separado por comas)</small
          ></label
        >
        <input
          type="text"
          id="tags"
          name="tags"
          value={product.tags}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>
      
      
      <div class="grid grid-cols-2 gap-4">
        <!-- Gender -->
        <div class="mb-4">
          <label for="gender" class="block">Sexo</label>
          <select
            class="w-full p-2 border border-gray-300 rounded"
            name="gender"
          >
            <option value="">[ Seleccione ]</option>
            {
              ['men', 'women', 'unisex', 'kid'].map((gender) => (
                <option
                  value={gender}
                  class="capitalize"
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class="mb-4">
          <label for="tags" class="block">Tipo</label>
          <select class="w-full p-2 border border-gray-300 rounded" name="type">
            <option value="">[ Seleccione ]</option>
            {
              ['shirts', 'shirt', 'pants', 'hats', 'hoodies'].map((type) => (
                <option
                  value={type}
                  class="capitalize"
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Tallas -->
      <div class="mb-4">
        <label for="sizes" class="block">Tallas</label>
        <div class="flex">
          {
            ['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => (
              <button
                type="button"
                class:list={["btn-size", {active: selectedSizes.includes(size)}]}
                onclick="this.classList.toggle('active')"
              >
                {size}
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class="mt-4">
        
         <!-- Guardar  -->
        <div class="flex justify-end">
          <button class="bg-blue-500 mb-5 p-2 rounded text-white">
            Guardar producto
          </button>
        </div>
        
        <!-- File input -->
        <div class="flex items-center justify-center w-full">
          <label
            for="file-upload"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100"
            id="drop-zone"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                class="w-8 h-8 mb-4 text-gray-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12"
                ></path>
              </svg>

              <p class="mb-2 text-sm text-gray-500" id="lbl-selected-files">
                <span class="font-semibold">Click aquí </span> o arrastra los archivos
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- accept only images -->
            <input
              id="file-upload"
              class="hidden"
              name="imageFiles"
              type="file"
              accept="image/*"
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideshow images={images.map(i => i.image)} />

        <table class="w-full border">
          <thead>
            <tr>
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map(({id,image}) => (
                <tr id={id} class="border">
                  <td class="flex justify-center">
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className="w-16 h-16 rounded"
                    />
                  </td>
                  <td class="text-center">
                    <button type="button" data-id={id} class="btn-delete-image">X</button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

</MainLayout>

<style>
  .btn-size,
  .btn-delete-image {
    @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
  }

  .active {
    @apply bg-blue-500 text-white;
  }
</style>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  // Este evento se dispara cuando la página se ha cargado completamente
  document.addEventListener('astro:page-load', () => {
    const $form = document.querySelector('form') as HTMLFormElement;
    if(!$form) return;

    const $sizeButtons: NodeListOf<HTMLButtonElement> = document.querySelectorAll('.btn-size');
    const $btnsDeleteImage: NodeListOf<HTMLButtonElement> = document.querySelectorAll('.btn-delete-image');

    const $lblSelectedFiles = document.querySelector('#lbl-selected-files') as HTMLParagraphElement;
    const $dropZone = document.querySelector('#drop-zone') as HTMLLabelElement;
    const $fileInput = document.querySelector('#file-upload') as HTMLInputElement;

    $form.addEventListener('submit', async(e) => {
      e.preventDefault();

      // Obtenemos las tallas seleccionadas por el usuario en la edición del producto 
      const selectedSizes = Array.from($sizeButtons)
        .filter((button) => button.classList.contains('active'))
        .map((button) => button.textContent?.trim())
        .join(',');

      // Obtenemos los valores del formulario a través de FormData que reconoce el atributo name de los inputs del formulario 
      const formData = new FormData($form);
      // Agregamos las tallas seleccionadas al objeto de valores del formulario
      formData.append('sizes', selectedSizes);

      // console.log(Object.fromEntries(formData.entries()));

      const { data: product, error} = await actions.createUpdateProduct(formData);
      if (error) {
        return alert(error.message);
      }

      // Redireccionamos al usuario a la página de edición del producto 
      navigate(`/admin/products/${product.slug}`);

    });
    
    // Este evento se dispara al eliminar una imagen del producto
    $btnsDeleteImage.forEach(($btn) => {
      $btn.addEventListener('click', async(e) => {
        // Obtenemos el id de la imagen a eliminar 
        const id = $btn.getAttribute('data-id');
        if (!id) return;

        // Eliminamos la imagen del producto tanto en la base de datos como en cloudinary
        const { error } = await actions.deleteProductImage(id);
        if (error) {
          console.log(error);
          return alert(error.message);
        }

        // Eliminamos la fila de la tabla de imágenes
        const $trImage = document.getElementById(id) as HTMLTableRowElement;
        $trImage.remove();

      });
    });

    const allDragDropEvents = ['dragenter', 'dragover','dragleave', 'drop'] as const;
    const dragEnterOverEvents = ['dragenter', 'dragover'];
    const dragLeaveDropEvents = ['dragleave', 'drop'];

    const preventDefaults = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
    }

    const highlight = () => {
      $dropZone.classList.add('border-blue-500','bg-blue-50');
    }

    const unHighlight = () => {
      $dropZone.classList.remove('border-blue-500','bg-blue-50');
    }

    const createFileList = (files: File[]): FileList => {
      //'DataTransfer()' es parte de la API de Drag and Drop y se utiliza para manejar los datos que se transfieren durante una 
      // operación de arrastrar y soltar. También se puede usar para simular la subida de archivos a través de un input de tipo file.
      const dataTransfer = new DataTransfer();
      //* Agregamos los archivos al objeto de transferencia de datos para simular la subida de archivos 
      files.forEach((file) => dataTransfer.items.add(file));

      //* Retornamos los archivos en un objeto de tipo FileList 
      return dataTransfer.files;
    }

    const handleFiles = (files: FileList) => {
      // Validamos que los archivos sean imágenes 
      const validFiles = Array.from(files).filter((file) => file.type.startsWith('image/'));
      // console.log(validFiles);

      if ($fileInput && validFiles.length > 0) {
        //*  Agregamos los archivos al input de tipo file
        $fileInput.files = createFileList(validFiles);
      }

      // Mostramos la cantidad de archivos seleccionados por el usuario
      $lblSelectedFiles.innerHTML = `
        <strong>${validFiles.length}</strong> archivos seleccionados
      `;
    }

    // Estos eventos de drag and drop se disparan y se previenen para evitar que el navegador abra la imagen en el navegador
    allDragDropEvents.forEach((eventName) => {
      $dropZone.addEventListener(eventName, preventDefaults);
      document.body.addEventListener(eventName, preventDefaults);
    });

    // Este evento se dispara cuando el usuario arrastra un archivo sobre el drop zone 
    dragEnterOverEvents.forEach((eventName) => {
      $dropZone.addEventListener(eventName,highlight);
    });

    // Este evento se dispara cuando el usuario quita el archivo del drop zone o lo suelta
    dragLeaveDropEvents.forEach((eventName) => {
      $dropZone.addEventListener(eventName,unHighlight);
    });

    // Este evento se dispara cuando el usuario suelta el archivo en el dropzone
    $dropZone.addEventListener('drop', (e) => {
      //* Archivos arrastrados en el dropzone 
      const files = e.dataTransfer?.files;
      // console.log(files);
      

      if (files) {
        handleFiles(files);
      }

      // console.log($fileInput.files);
    });
    
    // Fin del astro:page-load
  });
</script>